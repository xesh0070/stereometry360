import flet as ft
import threading
import random
import json
from pathlib import Path


from pygame_manager import run_with_check
# –ú–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ 3
from models3d.tip3_cube2 import run_pygame1
from models3d.tip3_cube1 import run_pygame1_1
from models3d.tip3_cube1_svetl import run_pygame1_1_svetl
from models3d.tip3_par2_sv import run_pygame_tip3_par2_sv
from models3d.tip3_par2_dark import run_pygame_par2_dark
from models3d.tip3_pir import run_pygame_tip3_pir1
from models3d.tip3_mngg import run_pygame_tip3_mngg
from models3d.tip3_mngg_dark import run_pygame_tip3_mngg_dark
from models3d.figures2 import run_pygame, triangular_prism, pentagonal_prism,piramid_6, piramid_4, piramid_3, piramid_4_ys, konys, cylinder, inclined_prism, cube, hexagonal_prism, sphere
from –ø—Ä–æ–±—É—é import run_pygame_cube

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Ç–∏–ø–∞ 3.
SOLVED_TASKS_FILE = "solved_tasks.json"
solved_tasks = set()


# –í—ã–∑–æ–≤ –æ–∫–Ω–∞ —Å –º–æ–¥–µ–ª—è–º–∏ —Ñ–∏–≥—É—Ä
def start_pygame_with_figure(draw_function, persp):
    threading.Thread(target=run_pygame, args=(draw_function, persp), daemon=True).start()

def load_solved_tasks():
    global solved_tasks
    try:
        if Path(SOLVED_TASKS_FILE).exists():
            with open(SOLVED_TASKS_FILE, "r") as f:
                solved_tasks = set(json.load(f))
    except:
        solved_tasks = set()

#–°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
def save_solved_tasks():
    with open(SOLVED_TASKS_FILE, "w") as f:
        json.dump(list(solved_tasks), f)


def add_solved_task(task_id):
    solved_tasks.add(task_id)
    save_solved_tasks()

def is_task_solved(task_id):
    return task_id in solved_tasks

load_solved_tasks()


# –í—ã–∑–æ–≤ –æ–∫–Ω–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è –∑–∞–¥–∞—á –µ–≥—ç 3 —Ç–∏–ø–∞
def start_pygame_with_cube1(e):
    run_with_check(run_pygame1_1, e)


def start_pygame_with_cube1_sv(e):
    run_with_check(run_pygame1_1_svetl, e)


def start_pygame_with_cube2(e):
    run_with_check(run_pygame1, e)


def start_pygame_with_par2_sv(e):
    run_with_check(run_pygame_tip3_par2_sv, e)


def start_pygame_with_par2_dark(e):
    run_with_check(run_pygame_par2_dark, e)


def start_pygame_with_pir1(e):
    run_with_check(run_pygame_tip3_pir1, e)


def start_pygame_with_mngg1(e):
    run_with_check(run_pygame_tip3_mngg, e)


def start_pygame_with_mngg1_dark(e):
    run_with_check(run_pygame_tip3_mngg_dark, e)


def start_pygame_with_red_cube(e):
    run_with_check(run_pygame_cube, e)
    
details0 = ft.Container(
        content=None,
        expand=True,
        padding=25,

    )
details1 = ft.Container(
        content=None,
        expand=True,
        padding=25,

    )

details0_2 = ft.Container(
        content=None,
        expand=True,
        padding=25,

    )

def show_tip3_cube1_details0_2(page, e):
    details0_2.content = None
    global show_solution
    # –ù–∞—Ö–æ–∂—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    responsive_row = details0.content
    first_column = None
    for control in responsive_row.controls:
        if isinstance(control, ft.Column) and control.col.get("md") == 7:
            first_column = control
            break
    if show_solution:
        if len(first_column.controls) > 4:  # –ü—Ä–æ–≤–µ—Ä—è—é, –µ—Å—Ç—å –ª–∏ —Ä–µ—à–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            first_column.controls.pop()
        show_solution = False
        e.control.text = "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
    else:
        solution_content = ft.Column(
            controls=[
                ft.Text("–î–∞–Ω–æ: S = 18", size=18, weight=ft.FontWeight.BOLD),
                ft.Text("–ù–∞–π—Ç–∏: d ", size=18, weight=ft.FontWeight.BOLD),
                ft.Text("–†–µ—à–µ–Ω–∏–µ:", size=18, weight=ft.FontWeight.BOLD),
                ft.Text("–ü—É—Å—Ç—å —Ä–µ–±—Ä–æ –∫—É–±–∞ —Ä–∞–≤–Ω–æ a, —Ç–æ–≥–¥–∞ –ø–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∫—É–±–∞ S = 6a¬≤, –∞ –¥–∏–∞–≥–æ–Ω–∞–ª—å –∫—É–±–∞ d = a‚àö3",
                        size=18),

                ft.Text("–¢–æ–≥–¥–∞ –¥–∏–∞–≥–æ–Ω–∞–ª—å –∫—É–±–∞ —Ä–∞–≤–Ω–∞:", size=18),
                ft.Text("d = ‚àö3‚àö(S/6) = ‚àö(3√óS/6) = ‚àö(S/2) = ‚àö9 = 3", size=18),
                ft.Text("–û—Ç–≤–µ—Ç: 3", size=18, weight=ft.FontWeight.BOLD),
            ],
            spacing=5,
            tight=True,
        )

        # –î–æ–±–∞–≤–ª—è—é —Ä–µ—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–æ–Ω–Ω–µ
        first_column.controls.append(solution_content)
        show_solution = True
        e.control.text = "–°–ø—Ä—è—Ç–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"

    page.update()


def show_tip3_cube1(page):
    details0.content = None
    page.update()
    global show_solution
    show_solution = False

    # –ì–∞–ª–æ—á–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —Å—Ç–∞—Ç—É—Å–µ –∑–∞–¥–∞—á–∏ (—Ä–µ—à–µ–Ω–æ/–Ω–µ—Ç)
    checkmark = ft.Icon(
        name=ft.icons.CHECK_CIRCLE_OUTLINE,
        color=ft.colors.GREEN if is_task_solved("tip3_cube1") else ft.colors.GREY,
        size=24
    )

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–º –º–æ–¥–µ–ª–∏
    global light_theme_checked, dark_theme_checked, red_theme_checked
    light_theme_checked = False
    dark_theme_checked = False
    red_theme_checked = False

    def check_item_clicked(e, theme_type):
        global light_theme_checked, dark_theme_checked, red_theme_checked

        if theme_type == "light":
            light_theme_checked = not light_theme_checked
            if light_theme_checked:
                dark_theme_checked = False
                red_theme_checked = False
        elif theme_type == "dark":
            dark_theme_checked = not dark_theme_checked
            if dark_theme_checked:
                light_theme_checked = False
                red_theme_checked = False
        else:
            red_theme_checked = not red_theme_checked
            if red_theme_checked:
                light_theme_checked = False
                dark_theme_checked = False

        for item in theme_menu.items:
            if item.text == "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞":
                item.checked = light_theme_checked
            elif item.text == "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞":
                item.checked = dark_theme_checked
            elif item.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
                item.checked = red_theme_checked
        theme_menu.update()

    def handle_open_model(page, e):
        if light_theme_checked:
            start_pygame_with_cube1_sv(e)  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
        elif dark_theme_checked:
            start_pygame_with_cube1(e)
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞ –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã
        elif red_theme_checked:
            start_pygame_with_red_cube(e)
        else:
            start_pygame_with_cube1_sv(e)  # –°–≤–µ—Ç–ª–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ

    # –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    theme_menu = ft.PopupMenuButton(
        items=[
            ft.PopupMenuItem(
                text="–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞",
                checked=False,
                on_click=lambda e: check_item_clicked(e, "light"),

            ),
            ft.PopupMenuItem(
                text="–¢–µ–º–Ω–∞—è —Ç–µ–º–∞",
                checked=False,
                on_click=lambda e: check_item_clicked(e, "dark"),

            ),
            ft.PopupMenuItem(
                text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                checked=False,
                on_click=lambda e: check_item_clicked(e, "red"),

            ),
        ],
        icon=ft.icons.MORE_VERT, style=ft.ButtonStyle(color="#4E426D"),
        tooltip="–í—ã–±–æ—Ä —Ç–µ–º—ã"
    )

    # –ø–æ–ª–µ –≤–≤–æ–¥–∞
    answer_input = ft.TextField(
        hint_text="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç",
        width=180,
        border_color="#4E426D",
        cursor_color="#4E426D",
        text_size=14,
        border_radius=20,
        content_padding=10,
        expand=True,
    )

    def check_answer(e):

        user_answer = answer_input.value.strip().replace(',', '.')
        try:
            num = int(user_answer)
            if num == 3:
                feedback = f"–ú–æ–ª–æ–¥–µ—Ü! –û—Ç–≤–µ—Ç {num} –≤–µ—Ä–Ω—ã–π! üéâ"
                answer_input.border_color = ft.colors.GREEN
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ä–µ—à–µ–Ω–Ω—ã–µ
                add_solved_task("tip3_cube1")
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É
                update_checkmark("tip3_cube1", True)

            else:
                feedback = f"–û—Ç–≤–µ—Ç {num} –Ω–µ–≤–µ—Ä–Ω—ã–π. ‚ùå"
                answer_input.border_color = ft.colors.RED
        except ValueError:
            feedback = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! ‚ö†Ô∏è"
            answer_input.border_color = ft.colors.ORANGE

        answer_input.hint_text = feedback
        answer_input.value = ""
        answer_input.width = max(180, len(feedback) * 9)
        page.update()

    def update_checkmark(task_id, is_solved=None):
        if is_solved is None:
            is_solved = is_task_solved(task_id)
        pass

    answer_input.on_submit = check_answer

    enter_icon = ft.IconButton(
        icon=ft.icons.KEYBOARD_RETURN,
        icon_color="#4E426D",
        on_click=check_answer,
        tooltip="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç",
    )
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–¥–∞—á–∏
    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –ö—É–±",
                            size=12, weight=ft.FontWeight.BOLD),
                    ft.Row(
                        controls=[
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 1",
                                on_click=show_tip3_cube1,
                                style=ft.ButtonStyle(color="black"), width=100),
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 2",
                                on_click=show_tip3_cube2,
                                style=ft.ButtonStyle(color="black"), width=100),
                        ],
                        spacing=10
                    ),
                    ft.Row([
                        ft.Text("–ó–∞–¥–∞—á–∞ ‚Ññ1", size=24, weight=ft.FontWeight.BOLD),
                        checkmark
                    ], spacing=10),
                    ft.Text(
                        "–ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∫—É–±–∞ —Ä–∞–≤–Ω–∞ 18. –ù–∞–π–¥–∏—Ç–µ –µ–≥–æ –¥–∏–∞–≥–æ–Ω–∞–ª—å.",
                        size=21,
                    ),
                    ft.Row(
                        controls=[
                            ft.Row(
                                controls=[
                                    answer_input,
                                    enter_icon,
                                ],
                                spacing=10,
                                alignment=ft.MainAxisAlignment.START,

                            ),
                            ft.Row([ft.TextButton(
                                "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
                                on_click=show_tip3_cube1_details0_2,
                                style=ft.ButtonStyle(color="#4E426D"),
                            ), ], spacing=10,
                            ),

                        ],

                    ),

                ],
                spacing=10,

                alignment=ft.MainAxisAlignment.START,
            ),
            ft.Column(
                col={"sm": 9, "md": 5},
                controls=[
                    ft.Container(height=5),
                    ft.Image(
                        src="assets/cube0.jpg",
                        width=190,
                        height=190,
                        fit=ft.ImageFit.SCALE_DOWN,

                    ),
                    ft.Row(
                        controls=[
                            ft.ElevatedButton(
                                "–û—Ç–∫—Ä—ã—Ç—å 3d –º–æ–¥–µ–ª—å",
                                on_click=handle_open_model,
                                style=ft.ButtonStyle(color="#4E426D"),

                                width=180
                            ),
                            theme_menu,
                        ],
                        spacing=5,
                        alignment=ft.MainAxisAlignment.CENTER,

                    ),
                ],

                spacing=15,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,

            ),
        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_cube2_details0_2(page, e):
    details0_2.content = None
    global show_solution

    responsive_row = details0.content
    first_column = None
    for control in responsive_row.controls:
        if isinstance(control, ft.Column) and control.col.get("md") == 7:
            first_column = control
            break

    if show_solution:

        if len(first_column.controls) > 4:
            first_column.controls.pop()
        show_solution = False
        e.control.text = "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
    else:

        solution_content = ft.Column(
            controls=[
                ft.Text("–î–∞–Ω–æ: V = 8", size=18, weight=ft.FontWeight.BOLD),
                ft.Text("–ù–∞–π—Ç–∏: S ", size=18, weight=ft.FontWeight.BOLD),
                ft.Text("–†–µ—à–µ–Ω–∏–µ:", size=18, weight=ft.FontWeight.BOLD),
                ft.Text(
                    "–ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∫—É–±–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –µ–≥–æ —Ä–µ–±—Ä–æ a —Ñ–æ—Ä–º—É–ª–æ–π S = 6a¬≤, –æ–±—ä–µ–º —Ñ–æ—Ä–º—É–ª–æ–π V = a¬≥. –ü–æ—ç—Ç–æ–º—É a¬≥ = 8 –æ—Ç–∫—É–¥–∞ a = 2; ",
                    size=18),
                ft.Text("S = 6√ó2¬≤ = 24", size=18),

                ft.Text("–û—Ç–≤–µ—Ç: 24", size=18, weight=ft.FontWeight.BOLD),
            ],
            spacing=5,
            tight=True,
        )

        first_column.controls.append(solution_content)
        show_solution = True
        e.control.text = "–°–ø—Ä—è—Ç–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"

    page.update()


def show_tip3_cube2(page, e):
    details0.content = None
    page.update()

    global show_solution
    show_solution = False

    checkmark = ft.Icon(
        name=ft.icons.CHECK_CIRCLE_OUTLINE,
        color=ft.colors.GREEN if is_task_solved("tip3_cube2") else ft.colors.GREY,
        size=24
    )

    def update_checkmark(task_id, is_solved=None):
        if is_solved is None:
            is_solved = is_task_solved(task_id)
        pass

    global light_theme_checked, dark_theme_checked
    light_theme_checked = False
    dark_theme_checked = False

    def check_item_clicked(e, theme_type):
        global light_theme_checked, dark_theme_checked

        if theme_type == "light":
            light_theme_checked = not light_theme_checked
            if light_theme_checked:
                dark_theme_checked = False
        else:
            dark_theme_checked = not dark_theme_checked
            if dark_theme_checked:
                light_theme_checked = False

        for item in theme_menu.items:
            if item.text == "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞":
                item.checked = light_theme_checked
            elif item.text == "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞":
                item.checked = dark_theme_checked
        theme_menu.update()

    def handle_open_model(e):
        if light_theme_checked:
            start_pygame_with_cube1_sv(e)
        elif dark_theme_checked:
            start_pygame_with_cube1(e)
        else:
            start_pygame_with_cube1_sv(e)

    theme_menu = ft.PopupMenuButton(
        items=[
            ft.PopupMenuItem(
                text="–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞",
                checked=False,
                on_click=lambda e: check_item_clicked(e, "light"),

            ),
            ft.PopupMenuItem(
                text="–¢–µ–º–Ω–∞—è —Ç–µ–º–∞",
                checked=False,
                on_click=lambda e: check_item_clicked(e, "dark"),

            ),
        ],
        icon=ft.icons.MORE_VERT, style=ft.ButtonStyle(color="#4E426D"),
        tooltip="–í—ã–±–æ—Ä —Ç–µ–º—ã"
    )

    answer_input = ft.TextField(
        hint_text="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç",
        width=180,
        border_color="#4E426D",
        cursor_color="#4E426D",
        text_size=14,
        border_radius=20,
        content_padding=10,
        expand=True,
    )

    def check_answer(e):

        user_answer = answer_input.value.strip().replace(',', '.')
        try:
            num = int(user_answer)
            if num == 24:
                feedback = f"–ú–æ–ª–æ–¥–µ—Ü! –û—Ç–≤–µ—Ç {num} –≤–µ—Ä–Ω—ã–π! üéâ"
                answer_input.border_color = ft.colors.GREEN
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ä–µ—à–µ–Ω–Ω—ã–µ
                add_solved_task("tip3_cube2")
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É
                update_checkmark("tip3_cube2", True)
            else:
                feedback = f"–û—Ç–≤–µ—Ç {num} –Ω–µ–≤–µ—Ä–Ω—ã–π. ‚ùå"
                answer_input.border_color = ft.colors.RED
        except ValueError:
            feedback = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! ‚ö†Ô∏è"
            answer_input.border_color = ft.colors.ORANGE

        answer_input.hint_text = feedback
        answer_input.value = ""
        answer_input.width = max(180, len(feedback) * 9)
        page.update()

    answer_input.on_submit = check_answer

    enter_icon = ft.IconButton(
        icon=ft.icons.KEYBOARD_RETURN,
        icon_color="#4E426D",
        on_click=check_answer,
        tooltip="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç",
    )

    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –ö—É–±",
                            size=12, weight=ft.FontWeight.BOLD),
                    ft.Row(
                        controls=[
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 1",
                                on_click=show_tip3_cube1,
                                style=ft.ButtonStyle(color="black"), width=100),
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 2",
                                on_click=show_tip3_cube2,
                                style=ft.ButtonStyle(color="black"), width=100),
                        ],
                        spacing=10
                    ),
                    ft.Row([
                        ft.Text("–ó–∞–¥–∞—á–∞ ‚Ññ2", size=24, weight=ft.FontWeight.BOLD),
                        checkmark
                    ], spacing=10),
                    ft.Text(
                        "–û–±—ä–µ–º –∫—É–±–∞ —Ä–∞–≤–µ–Ω 8. –ù–∞–π–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –µ–≥–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.",
                        size=21,
                    ),
                    ft.Row(
                        controls=[
                            ft.Row(
                                controls=[
                                    answer_input,
                                    enter_icon,
                                ],
                                spacing=10,
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            ft.TextButton(
                                "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
                                on_click=show_tip3_cube2_details0_2,
                                style=ft.ButtonStyle(color="#4E426D")
                            ),
                        ],
                    ),

                ],
                spacing=10,

                alignment=ft.MainAxisAlignment.START,
            ),
            ft.Column(
                col={"sm": 9, "md": 5},
                controls=[
                    ft.Container(height=5),
                    ft.Image(
                        src="assets/cube0.jpg",
                        width=190,
                        height=190,
                        fit=ft.ImageFit.SCALE_DOWN
                    ),
                    ft.Row(
                        controls=[
                            ft.ElevatedButton(
                                "–û—Ç–∫—Ä—ã—Ç—å 3d –º–æ–¥–µ–ª—å",
                                on_click=handle_open_model,
                                style=ft.ButtonStyle(color="#4E426D"),

                                width=180
                            ),
                            theme_menu,
                        ],
                        spacing=5,
                        alignment=ft.MainAxisAlignment.CENTER,
                    ),
                ],

                spacing=15,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            ),
        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_pir1_details0_2(page, e):
    global show_solution

    responsive_row = details0.content
    first_column = None
    for control in responsive_row.controls:
        if isinstance(control, ft.Column) and control.col.get("md") == 7:
            first_column = control
            break

    if show_solution:

        if len(first_column.controls) > 4:
            first_column.controls.pop()
        show_solution = False
        e.control.text = "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
    else:
        solution_content = ft.Column(
            controls=[
                ft.Text("–î–∞–Ω–æ: SABCD ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–∏—Ä–∞–º–∏–¥–∞; O ‚àí —Ü–µ–Ω—Ç—Ä –æ—Å–Ω–æ–≤–∞–Ω–∏—è; SO = 15; BD = 16.  ",
                        size=18, weight=ft.FontWeight.BOLD),
                ft.Text("–ù–∞–π—Ç–∏: SA ", size=18, weight=ft.FontWeight.BOLD),
                ft.Text("–†–µ—à–µ–Ω–∏–µ:", size=18, weight=ft.FontWeight.BOLD),
                ft.Text(
                    "–í –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∏—Ä–∞–º–∏–¥–µ –≤–µ—Ä—à–∏–Ω–∞ –ø—Ä–æ–µ—Ü–∏—Ä—É–µ—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä –æ—Å–Ω–æ–≤–∞–Ω–∏—è, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, \nSO —è–≤–ª—è–µ—Ç—Å—è –≤—ã—Å–æ—Ç–æ–π –ø–∏—Ä–∞–º–∏–¥—ã. –¢–æ–≥–¥–∞ –ø–æ —Ç–µ–æ—Ä–µ–º–µ –ü–∏—Ñ–∞–≥–æ—Ä–∞",
                    size=18),
                ft.Row(
                    controls=[
                        ft.Text("SA¬≤ = SB¬≤ = SO¬≤ + BO¬≤ = SO¬≤ + (  ", size=17),
                        ft.Column(
                            controls=[
                                ft.Text(" BD", size=17),
                                ft.Container(width=30, height=1, bgcolor=ft.colors.BLACK),
                                ft.Text("  2 ", size=17),
                            ],
                            spacing=0,
                        ),
                        ft.Text("  )¬≤ = 225 + 64 = 289; SA = 17", size=17),
                    ],
                    spacing=-10,
                ),
                ft.Text("–û—Ç–≤–µ—Ç: 17", size=18, weight=ft.FontWeight.BOLD),
            ],
            spacing=5,
        )

        first_column.controls.append(solution_content)
        show_solution = True
        e.control.text = "–°–ø—Ä—è—Ç–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"

    page.update()


def show_tip3_pir1(page, e):
    details0.content = None
    page.update()

    global show_solution
    show_solution = False

    checkmark = ft.Icon(
        name=ft.icons.CHECK_CIRCLE_OUTLINE,
        color=ft.colors.GREEN if is_task_solved("tip3_pir1") else ft.colors.GREY,
        size=24
    )

    def update_checkmark(task_id, is_solved=None):
        if is_solved is None:
            is_solved = is_task_solved(task_id)
        pass

    answer_input = ft.TextField(
        hint_text="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç",
        width=180,
        border_color="#4E426D",
        cursor_color="#4E426D",
        text_size=14,
        border_radius=20,
        content_padding=10,
        expand=True,
    )

    def check_answer(e):
        user_answer = answer_input.value.strip().replace(',', '.')
        try:
            num = int(user_answer)
            if num == 17:
                feedback = f"–ú–æ–ª–æ–¥–µ—Ü! –û—Ç–≤–µ—Ç {num} –≤–µ—Ä–Ω—ã–π! üéâ "
                answer_input.border_color = ft.colors.GREEN
                add_solved_task("tip3_pir1")
                update_checkmark("tip3_pir1", True)
            else:
                feedback = f"–û—Ç–≤–µ—Ç {num} –Ω–µ–≤–µ—Ä–Ω—ã–π. ‚ùå"
                answer_input.border_color = ft.colors.RED
        except ValueError:
            feedback = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! ‚ö†Ô∏è"
            answer_input.border_color = ft.colors.ORANGE

        answer_input.hint_text = feedback
        answer_input.value = ""
        answer_input.width = max(
            180,
            len(feedback) * 9
        )

        page.update()

    answer_input.on_submit = check_answer

    enter_icon = ft.IconButton(
        icon=ft.icons.KEYBOARD_RETURN,
        icon_color="#4E426D",
        on_click=check_answer,
        tooltip="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç",
    )

    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –ü–∏—Ä–∞–º–∏–¥–∞",
                            size=12, weight=ft.FontWeight.BOLD),
                    ft.Row(
                        controls=[
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 1",
                                on_click=show_tip3_pir1,
                                style=ft.ButtonStyle(color="black"), width=100),
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 2",
                                on_click=show_tip3_pir2,
                                style=ft.ButtonStyle(color="black"), width=100),
                        ],
                        spacing=10
                    ),
                    ft.Row([
                        ft.Text("–ó–∞–¥–∞—á–∞ ‚Ññ1", size=24, weight=ft.FontWeight.BOLD),
                        checkmark
                    ], spacing=10),
                    ft.Text(
                        "–í –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–æ–π –ø–∏—Ä–∞–º–∏–¥–µ SABCD —Ç–æ—á–∫–∞ O ‚àí —Ü–µ–Ω—Ç—Ä –æ—Å–Ω–æ–≤–∞–Ω–∏—è, "
                        "S ‚àí –≤–µ—Ä—à–∏–Ω–∞, SO = 15, BD = 16. –ù–∞–π–¥–∏—Ç–µ –±–æ–∫–æ–≤–æ–µ —Ä–µ–±—Ä–æ SA.",
                        size=21,
                    ),
                    ft.Row(
                        controls=[
                            ft.Row(
                                controls=[
                                    answer_input,
                                    enter_icon,
                                ],
                                spacing=10,
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            ft.TextButton(
                                "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
                                on_click=show_tip3_pir1_details0_2,
                                style=ft.ButtonStyle(color="#4E426D")
                            ),
                        ],
                    ),
                ],
                spacing=10,
                alignment=ft.MainAxisAlignment.START,
            ),
            ft.Column(
                col={"sm": 9, "md": 5},
                controls=[
                    ft.Container(height=5),
                    ft.Image(
                        src="assets/pir1.svg",
                        width=230,
                        height=230,
                        # fit=ft.ImageFit.SCALE_DOWN
                    ),
                    ft.ElevatedButton(
                        "–û—Ç–∫—Ä—ã—Ç—å 3d –º–æ–¥–µ–ª—å",
                        on_click=lambda e: start_pygame_with_pir1(e),
                        style=ft.ButtonStyle(color="#4E426D")
                    ),
                ],
                spacing=15,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            ),
        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_pir2(page, e):
    details0.content = None
    page.update()

    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –ü–∏—Ä–∞–º–∏–¥–∞",
                            size=12, weight=ft.FontWeight.BOLD),

                    ft.Text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", size=24, weight=ft.FontWeight.BOLD),
                ]
            ),

        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_par1_details0_2(page, e):
    global show_solution
    responsive_row = details0.content
    first_column = None
    for control in responsive_row.controls:
        if isinstance(control, ft.Column) and control.col.get("md") == 7:
            first_column = control
            break

    if show_solution:
        if len(first_column.controls) > 4:
            first_column.controls.pop()
        show_solution = False
        e.control.text = "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
    else:
        solution_content = ft.Column(
            controls=[
                ft.Text("–î–∞–Ω–æ:", size=18, weight=ft.FontWeight.BOLD),
                ft.Text("ABCDA‚ÇÅB‚ÇÅC‚ÇÅD‚ÇÅ ‚Äî –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥", size=18),
                ft.Text("BD‚ÇÅ = 3; CD = 2; AD = 2; ", size=18),
                ft.Text("–ù–∞–π—Ç–∏: AA‚ÇÅ ", size=18, weight=ft.FontWeight.BOLD),
                ft.Text("–†–µ—à–µ–Ω–∏–µ:", size=18, weight=ft.FontWeight.BOLD),
                ft.Text("–ù–∞–π–¥–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å BD –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ ABCD –ø–æ —Ç–µ–æ—Ä–µ–º–µ –ü–∏—Ñ–∞–≥–æ—Ä–∞:", size=18),
                ft.Text("BD = ‚àö(AD¬≤ + AB¬≤) = ‚àö(AD¬≤ + CD¬≤) = ‚àö8", size=18),
                ft.Text("–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ DD‚ÇÅB. –ü–æ —Ç. –ü–∏—Ñ–∞–≥–æ—Ä–∞:", size=18),
                ft.Text("AA‚ÇÅ = DD‚ÇÅ = ‚àö(BD‚ÇÅ¬≤ - BD¬≤) = ‚àö(9 - 8) = 1", size=18),
                ft.Text("–û—Ç–≤–µ—Ç: 1", size=18, weight=ft.FontWeight.BOLD),
            ],
            spacing=5,
        )

        first_column.controls.append(solution_content)
        show_solution = True
        e.control.text = "–°–ø—Ä—è—Ç–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"

    page.update()


def show_tip3_par1(page, e):
    details0.content = None
    page.update()

    global show_solution
    show_solution = False

    def update_checkmark(task_id, is_solved=None):
        if is_solved is None:
            is_solved = is_task_solved(task_id)
        pass

    checkmark = ft.Icon(
        name=ft.icons.CHECK_CIRCLE_OUTLINE,
        color=ft.colors.GREEN if is_task_solved("tip3_par1") else ft.colors.GREY,
        size=24
    )

    answer_input = ft.TextField(
        hint_text="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç",
        width=180,
        border_color="#4E426D",
        cursor_color="#4E426D",
        text_size=14,
        border_radius=20,
        content_padding=10,
        expand=True,
    )

    def check_answer(e):
        user_answer = answer_input.value.strip().replace(',', '.')
        try:
            num = int(user_answer)
            if num == 1:
                feedback = f"–ú–æ–ª–æ–¥–µ—Ü! –û—Ç–≤–µ—Ç {num} –≤–µ—Ä–Ω—ã–π! üéâ"
                answer_input.border_color = ft.colors.GREEN
                add_solved_task("tip3_par1")
                update_checkmark("tip3_par1", True)
            else:
                feedback = f"–û—Ç–≤–µ—Ç {num} –Ω–µ–≤–µ—Ä–Ω—ã–π. ‚ùå"
                answer_input.border_color = ft.colors.RED
        except ValueError:
            feedback = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! ‚ö†Ô∏è"
            answer_input.border_color = ft.colors.ORANGE

        answer_input.hint_text = feedback
        answer_input.value = ""
        answer_input.width = max(180, len(feedback) * 9)
        page.update()

    answer_input.on_submit = check_answer

    enter_icon = ft.IconButton(
        icon=ft.icons.KEYBOARD_RETURN,
        icon_color="#4E426D",
        on_click=check_answer,
        tooltip="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç",
    )

    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –ü–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥",
                            size=12, weight=ft.FontWeight.BOLD),
                    ft.Row(
                        controls=[
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 1",
                                on_click=show_tip3_par2,
                                style=ft.ButtonStyle(color="black"), width=100),
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 2",
                                on_click=show_tip3_par1,
                                style=ft.ButtonStyle(color="black"), width=100),
                        ],
                        spacing=10
                    ),
                    ft.Row([
                        ft.Text("–ó–∞–¥–∞—á–∞ ‚Ññ2", size=24, weight=ft.FontWeight.BOLD),
                        checkmark
                    ], spacing=10),
                    ft.Text(
                        "–í –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–º –ø–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥–µ ABCDA‚ÇÅB‚ÇÅC‚ÇÅD‚ÇÅ –∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ BD‚ÇÅ=3, CD=2, AD=2. –ù–∞–π–¥–∏—Ç–µ –¥–ª–∏–Ω—É —Ä–µ–±—Ä–∞ AA‚ÇÅ",
                        size=21,
                    ),
                    ft.Row(
                        controls=[
                            ft.Row(
                                controls=[
                                    answer_input,
                                    enter_icon,
                                ],
                                spacing=10,
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            ft.TextButton(
                                "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
                                on_click=show_tip3_par1_details0_2,
                                style=ft.ButtonStyle(color="#4E426D")
                            ),
                        ],
                    ),
                ],
                spacing=10,
                alignment=ft.MainAxisAlignment.START,
            ),
            ft.Column(
                col={"sm": 9, "md": 5},
                controls=[
                    ft.Container(height=5),
                    ft.Image(
                        src="assets/cube0_2.jpg",
                        width=250,
                        height=250,
                    ),
                    ft.ElevatedButton(
                        "–û—Ç–∫—Ä—ã—Ç—å 3d –º–æ–¥–µ–ª—å",
                        on_click=lambda e: start_pygame_with_cube2(e),
                        style=ft.ButtonStyle(color="#4E426D")
                    ),
                ],
                spacing=15,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            ),
        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_par2_details0_2(page, e):
    global show_solution
    responsive_row = details0.content
    first_column = None
    second_column = None
    for control in responsive_row.controls:
        if isinstance(control, ft.Column):
            if control.col.get("md") == 7:
                first_column = control
            elif control.col.get("md") == 5:
                second_column = control

    if show_solution:

        if len(first_column.controls) > 4:
            first_column.controls.pop()

        if len(second_column.controls) > 3:
            second_column.controls.pop()
        show_solution = False
        e.control.text = "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
    else:
        solution_content = ft.ResponsiveRow(
            controls=[
                ft.Column(
                    col={"sm": 12, "md": 12},
                    controls=[
                        ft.Text("–î–∞–Ω–æ:", size=18, weight=ft.FontWeight.BOLD),
                        ft.Text("ABCDA‚ÇÅB‚ÇÅC‚ÇÅD‚ÇÅ ‚Äî –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥", size=18),
                        ft.Text("AB = 5; AD = 4; AA‚ÇÅ = 3.", size=18),
                        ft.Text("–ù–∞–π—Ç–∏: ‚à†(ABD‚ÇÅ) ", size=18, weight=ft.FontWeight.BOLD),
                        ft.Text("–†–µ—à–µ–Ω–∏–µ:", size=18, weight=ft.FontWeight.BOLD),
                        ft.Text("–í –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ AA‚ÇÅD‚ÇÅD –æ—Ç—Ä–µ–∑–æ–∫ AD‚ÇÅ —è–≤–ª—è–µ—Ç—Å—è –¥–∏–∞–≥–æ–Ω–∞–ª—å—é, A‚ÇÅD‚ÇÅ = AD. ", size=18),
                        ft.Text("–ü–æ —Ç. –ü–∏—Ñ–∞–≥–æ—Ä–∞: AD‚ÇÅ¬≤ = AA‚ÇÅ¬≤ + A‚ÇÅD‚ÇÅ¬≤ = 9 + 16 = 25 ‚áí AD‚ÇÅ = ‚àö25 = 5.", size=18),
                        ft.Text(
                            "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ ABD‚ÇÅ —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π: AB = AD‚ÇÅ = 5 –∑–Ω–∞—á–∏—Ç, –µ–≥–æ –æ—Å—Ç—Ä—ã–µ —É–≥–ª—ã —Ä–∞–≤–Ω—ã 45¬∞.",
                            size=18),
                        ft.Text("–û—Ç–≤–µ—Ç: 45", size=18, weight=ft.FontWeight.BOLD),
                    ]
                )
            ],
            spacing=5,
        )

        solution_image = ft.Image(
            src="assets/par2_2.svg",
            width=245,
            height=180,
        )
        second_column.controls.append(solution_image)
        first_column.controls.append(solution_content)
        show_solution = True
        e.control.text = "–°–ø—Ä—è—Ç–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"

    page.update()


def show_tip3_par2(page, e):
    # https: // math - ege.sdamgia.ru / problem?id = 245361

    details0.content = None
    page.update()

    global show_solution
    show_solution = False
    global light_theme_checked, dark_theme_checked
    light_theme_checked = False
    dark_theme_checked = False

    def check_item_clicked(e, theme_type):
        global light_theme_checked, dark_theme_checked

        if theme_type == "light":
            light_theme_checked = not light_theme_checked
            if light_theme_checked:
                dark_theme_checked = False
        else:
            dark_theme_checked = not dark_theme_checked
            if dark_theme_checked:
                light_theme_checked = False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
        for item in theme_menu.items:
            if item.text == "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞":
                item.checked = light_theme_checked
            elif item.text == "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞":
                item.checked = dark_theme_checked
        theme_menu.update()

    def handle_open_model(e):
        if light_theme_checked:
            start_pygame_with_par2_sv(e)
        elif dark_theme_checked:
            start_pygame_with_par2_dark(e)
        else:
            start_pygame_with_par2_sv(e)

    theme_menu = ft.PopupMenuButton(
        items=[
            ft.PopupMenuItem(
                text="–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞",
                checked=False,
                on_click=lambda e: check_item_clicked(e, "light"),

            ),
            ft.PopupMenuItem(
                text="–¢–µ–º–Ω–∞—è —Ç–µ–º–∞",
                checked=False,
                on_click=lambda e: check_item_clicked(e, "dark"),

            ),
        ],
        icon=ft.icons.MORE_VERT, style=ft.ButtonStyle(color="#4E426D"),
        tooltip="–í—ã–±–æ—Ä —Ç–µ–º—ã"
    )

    def update_checkmark(task_id, is_solved=None):
        if is_solved is None:
            is_solved = is_task_solved(task_id)
        pass

    checkmark = ft.Icon(
        name=ft.icons.CHECK_CIRCLE_OUTLINE,
        color=ft.colors.GREEN if is_task_solved("tip3_par2") else ft.colors.GREY,
        size=24
    )

    answer_input = ft.TextField(
        hint_text="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç",
        width=180,
        border_color="#4E426D",
        cursor_color="#4E426D",
        text_size=14,
        border_radius=20,
        content_padding=10,
        expand=True,
    )

    def check_answer(e):

        user_answer = answer_input.value.strip().replace(',', '.')
        try:
            num = int(user_answer)
            if num == 45:  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 1 —Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
                feedback = f"–ú–æ–ª–æ–¥–µ—Ü! –û—Ç–≤–µ—Ç {num} –≤–µ—Ä–Ω—ã–π! üéâ"
                answer_input.border_color = ft.colors.GREEN
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ä–µ—à–µ–Ω–Ω—ã–µ
                add_solved_task("tip3_par2")
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É
                update_checkmark("tip3_par2", True)
            else:
                feedback = f"–û—Ç–≤–µ—Ç {num} –Ω–µ–≤–µ—Ä–Ω—ã–π. ‚ùå"
                answer_input.border_color = ft.colors.RED
        except ValueError:
            feedback = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! ‚ö†Ô∏è"
            answer_input.border_color = ft.colors.ORANGE

        answer_input.hint_text = feedback
        answer_input.value = ""
        answer_input.width = max(180, len(feedback) * 9)
        page.update()

    answer_input.on_submit = check_answer

    enter_icon = ft.IconButton(
        icon=ft.icons.KEYBOARD_RETURN,
        icon_color="#4E426D",
        on_click=check_answer,
        tooltip="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç",
    )
    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –ü–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥",
                            size=12, weight=ft.FontWeight.BOLD),
                    ft.Row(
                        controls=[
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 1",
                                on_click=show_tip3_par2,
                                style=ft.ButtonStyle(color="black"), width=100),
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 2",
                                on_click=show_tip3_par1,
                                style=ft.ButtonStyle(color="black"), width=100),
                        ],
                        spacing=10
                    ),
                    ft.Row([
                        ft.Text("–ó–∞–¥–∞—á–∞ ‚Ññ1", size=24, weight=ft.FontWeight.BOLD),
                        checkmark
                    ], spacing=10),
                    ft.Text(
                        "–ù–∞–π–¥–∏—Ç–µ —É–≥–æ–ª ABD‚ÇÅ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ AB=5, AD=4, AA‚ÇÅ=3. –î–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ –≥—Ä–∞–¥—É—Å–∞—Ö.",

                        size=21,
                    ),
                    ft.Row(
                        controls=[
                            ft.Row(
                                controls=[
                                    answer_input,
                                    enter_icon,
                                ],
                                spacing=10,
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            ft.TextButton(
                                "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
                                on_click=show_tip3_par2_details0_2,
                                style=ft.ButtonStyle(color="#4E426D")
                            ),
                        ],
                    ),
                ],
                spacing=10,
                alignment=ft.MainAxisAlignment.START,
            ),
            ft.Column(
                col={"sm": 9, "md": 5},
                controls=[
                    ft.Container(height=5),
                    ft.Image(
                        src="assets/par2_0.svg",
                        width=235,
                        height=185,
                    ),
                    ft.Row(
                        controls=[
                            ft.ElevatedButton(
                                "–û—Ç–∫—Ä—ã—Ç—å 3d –º–æ–¥–µ–ª—å",
                                on_click=handle_open_model,
                                style=ft.ButtonStyle(color="#4E426D"),

                                width=180
                            ),
                            theme_menu,
                        ],
                        spacing=5,
                        alignment=ft.MainAxisAlignment.CENTER,
                    ),
                ],
                spacing=15,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            ),
        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_mngg1_details0_2(page, e):
    global show_solution
    responsive_row = details0.content
    first_column = None
    for control in responsive_row.controls:
        if isinstance(control, ft.Column) and control.col.get("md") == 7:
            first_column = control
            break

    if show_solution:
        # –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if len(first_column.controls) > 4:
            first_column.controls.pop()
        show_solution = False
        e.control.text = "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
    else:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ—à–µ–Ω–∏—è
        solution_content = ft.Column(
            controls=[
                ft.Text("–†–µ—à–µ–Ω–∏–µ:", size=18, weight=ft.FontWeight.BOLD),
                ft.Text(
                    "–û–±—ä–µ–º –¥–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–∞ —Ä–∞–≤–µ–Ω —Å—É–º–º–µ –æ–±—ä–µ–º–æ–≤ \n–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥–æ–≤ —Å —Ä–µ–±—Ä–∞–º–∏ 5,‚ÄØ4,‚ÄØ2 –∏ 2,‚ÄØ2,‚ÄØ4:",
                    size=18),
                ft.Text("V = V‚ÇÅ + V‚ÇÇ = 5√ó4√ó2 + 2√ó2√ó4 = 56", size=18),
                ft.Text("–û—Ç–≤–µ—Ç: 56", size=18, weight=ft.FontWeight.BOLD),
            ],
            spacing=5,
        )

        first_column.controls.append(solution_content)
        show_solution = True
        e.control.text = "–°–ø—Ä—è—Ç–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"

    page.update()


def show_tip3_mngg1(page, e):
    details0.content = None
    page.update()

    global show_solution
    show_solution = False

    def update_checkmark(task_id, is_solved=None):
        if is_solved is None:
            is_solved = is_task_solved(task_id)
        pass

    checkmark = ft.Icon(
        name=ft.icons.CHECK_CIRCLE_OUTLINE,
        color=ft.colors.GREEN if is_task_solved("tip3_mngg1") else ft.colors.GREY,
        size=24
    )

    global light_theme_checked, dark_theme_checked
    light_theme_checked = False
    dark_theme_checked = False

    def check_item_clicked(e, theme_type):
        global light_theme_checked, dark_theme_checked

        if theme_type == "light":
            light_theme_checked = not light_theme_checked
            if light_theme_checked:
                dark_theme_checked = False
        else:
            dark_theme_checked = not dark_theme_checked
            if dark_theme_checked:
                light_theme_checked = False

        for item in theme_menu.items:
            if item.text == "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞":
                item.checked = light_theme_checked
            elif item.text == "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞":
                item.checked = dark_theme_checked
        theme_menu.update()

    def handle_open_model(e):
        if light_theme_checked:
            start_pygame_with_mngg1(e)
        elif dark_theme_checked:
            start_pygame_with_mngg1_dark(e)
        else:
            start_pygame_with_mngg1_dark(e)

    theme_menu = ft.PopupMenuButton(
        items=[
            ft.PopupMenuItem(
                text="–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞",
                checked=False,
                on_click=lambda e: check_item_clicked(e, "light"),

            ),
            ft.PopupMenuItem(
                text="–¢–µ–º–Ω–∞—è —Ç–µ–º–∞",
                checked=False,
                on_click=lambda e: check_item_clicked(e, "dark"),

            ),
        ],
        icon=ft.icons.MORE_VERT, style=ft.ButtonStyle(color="#4E426D"),
        tooltip="–í—ã–±–æ—Ä —Ç–µ–º—ã"
    )

    answer_input = ft.TextField(
        hint_text="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç",
        width=180,
        border_color="#4E426D",
        cursor_color="#4E426D",
        text_size=14,
        border_radius=20,
        content_padding=10,
        expand=True,
    )

    def check_answer(e):

        user_answer = answer_input.value.strip().replace(',', '.')
        try:
            num = int(user_answer)
            if num == 56:
                feedback = f"–ú–æ–ª–æ–¥–µ—Ü! –û—Ç–≤–µ—Ç {num} –≤–µ—Ä–Ω—ã–π! üéâ"
                answer_input.border_color = ft.colors.GREEN
                add_solved_task("tip3_mngg1")
                update_checkmark("tip3_mngg1", True)
            else:
                feedback = f"–û—Ç–≤–µ—Ç {num} –Ω–µ–≤–µ—Ä–Ω—ã–π. ‚ùå"
                answer_input.border_color = ft.colors.RED
        except ValueError:
            feedback = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! ‚ö†Ô∏è"
            answer_input.border_color = ft.colors.ORANGE

        answer_input.hint_text = feedback
        answer_input.value = ""
        answer_input.width = max(180, len(feedback) * 9)
        page.update()

    answer_input.on_submit = check_answer

    enter_icon = ft.IconButton(
        icon=ft.icons.KEYBOARD_RETURN,
        icon_color="#4E426D",
        on_click=check_answer,
        tooltip="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç",
    )

    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –û–±—ä—ë–º –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–æ–≤",
                            size=12, weight=ft.FontWeight.BOLD),
                    ft.Row(
                        controls=[
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 1",
                                on_click=show_tip3_mngg1,
                                style=ft.ButtonStyle(color="black"), width=100),
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 2",
                                on_click=show_tip3_mngg2,
                                style=ft.ButtonStyle(color="black"), width=100),
                        ],
                        spacing=10
                    ),
                    ft.Row([
                        ft.Text("–ó–∞–¥–∞—á–∞ ‚Ññ1", size=24, weight=ft.FontWeight.BOLD),
                        checkmark
                    ], spacing=10),
                    ft.Text(
                        "–ù–∞–π–¥–∏—Ç–µ –æ–±—ä–µ–º –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ (–≤—Å–µ –¥–≤—É–≥—Ä–∞–Ω–Ω—ã–µ —É–≥–ª—ã –ø—Ä—è–º—ã–µ).",
                        size=21,
                    ),
                    ft.Row(
                        controls=[
                            ft.Row(
                                controls=[
                                    answer_input,
                                    enter_icon,
                                ],
                                spacing=10,
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            ft.TextButton(
                                "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
                                on_click=show_tip3_mngg1_details0_2,
                                style=ft.ButtonStyle(color="#4E426D")
                            ),
                        ],
                    ),
                ],
                spacing=10,
                alignment=ft.MainAxisAlignment.START,
            ),
            ft.Column(
                col={"sm": 9, "md": 5},
                controls=[
                    ft.Container(height=20),
                    ft.Image(
                        src="assets/mng1.svg",
                        width=200,
                        height=200,
                    ),
                    ft.Container(height=10),
                    ft.Row(
                        controls=[
                            ft.ElevatedButton(
                                "–û—Ç–∫—Ä—ã—Ç—å 3d –º–æ–¥–µ–ª—å",
                                on_click=handle_open_model,
                                style=ft.ButtonStyle(color="#4E426D"),

                                width=180
                            ),
                            theme_menu,
                        ],
                        spacing=5,
                        alignment=ft.MainAxisAlignment.CENTER,
                    ),
                ],
                spacing=0,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            ),
        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_mngg2(page, e):
    details0.content = None
    page.update()

    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –û–±—ä—ë–º –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–æ–≤",
                            size=12, weight=ft.FontWeight.BOLD),

                    ft.Text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", size=24, weight=ft.FontWeight.BOLD),
                ]
            ),

        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_vprizm1_details0_2(page, e):
    global show_solution
    responsive_row = details0.content
    first_column = None
    for control in responsive_row.controls:
        if isinstance(control, ft.Column) and control.col.get("md") == 7:
            first_column = control
            break

    if show_solution:
        if len(first_column.controls) > 4:
            first_column.controls.pop()
        show_solution = False
        e.control.text = "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
    else:
        solution_content = ft.Column(
            controls=[
                ft.Text("–†–µ—à–µ–Ω–∏–µ:", size=18, weight=ft.FontWeight.BOLD),
                ft.Text(
                    "–û–±—ä–µ–º –ø—Ä—è–º–æ–π –ø—Ä–∏–∑–º—ã —Ä–∞–≤–µ–Ω V = Sh, –≥–¥–µ S‚ÄØ‚ÄØ‚Äî –ø–ª–æ—â–∞–¥—å –æ—Å–Ω–æ–≤–∞–Ω–∏—è, \n–∞ h‚ÄØ‚ÄØ‚Äî –±–æ–∫–æ–≤–æ–µ —Ä–µ–±—Ä–æ. –ü–ª–æ—â–∞–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–æ–π a, –ª–µ–∂–∞—â–µ–≥–æ –≤ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏, –∑–∞–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º—É–ª–æ–π",
                    size=18),
                ft.Row(
                    controls=[
                        ft.Text("S = ", size=18),
                        ft.Column(
                            controls=[
                                ft.Text(" 3‚àö3 ", size=18),
                                ft.Container(width=50, height=1, bgcolor=ft.colors.BLACK),
                                ft.Text("  2 ", size=18),
                            ],
                            spacing=0,
                        ),
                        ft.Text("√ó a¬≤ = ", size=18),
                        ft.Column(
                            controls=[
                                ft.Text(" 3‚àö3 ", size=18),
                                ft.Container(width=50, height=1, bgcolor=ft.colors.BLACK),
                                ft.Text("  2 ", size=18),
                            ],
                            spacing=0,
                        ),
                        ft.Text("√ó 1¬≤ = ", size=18),
                        ft.Column(
                            controls=[
                                ft.Text(" 3‚àö3 ", size=18),
                                ft.Container(width=50, height=1, bgcolor=ft.colors.BLACK),
                                ft.Text("  2 ", size=18),
                            ],
                            spacing=0,
                        ),
                    ],
                    spacing=0,
                ),
                ft.Row(
                    controls=[
                        ft.Text("–¢–æ–≥–¥–∞ V –ø—Ä–∏–∑–º—ã = Sh = ", size=18),
                        ft.Column(
                            controls=[
                                ft.Text(" 3‚àö3 ", size=18),
                                ft.Container(width=50, height=1, bgcolor=ft.colors.BLACK),
                                ft.Text("  2 ", size=18),
                            ],
                            spacing=0,
                        ),
                        ft.Text("√ó ‚àö3 = 4,5.", size=18),
                    ],
                    spacing=0,
                ),
                ft.Text("–û—Ç–≤–µ—Ç: 4,5", size=18, weight=ft.FontWeight.BOLD),
            ],
            spacing=5,
        )

        first_column.controls.append(solution_content)
        show_solution = True
        e.control.text = "–°–ø—Ä—è—Ç–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"

    page.update()


def show_tip3_vprizm1(page, e):
    details0.content = None
    page.update()

    global show_solution
    show_solution = False

    def update_checkmark(task_id, is_solved=None):
        if is_solved is None:
            is_solved = is_task_solved(task_id)
        pass

    checkmark = ft.Icon(
        name=ft.icons.CHECK_CIRCLE_OUTLINE,
        color=ft.colors.GREEN if is_task_solved("tip3_vprizm1") else ft.colors.GREY,
        size=24
    )

    answer_input = ft.TextField(
        hint_text="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç",
        width=180,
        border_color="#4E426D",
        cursor_color="#4E426D",
        text_size=14,
        border_radius=20,
        content_padding=10,
        expand=True,
    )

    def check_answer(e):

        user_answer = answer_input.value.strip().replace(',', '.')
        try:
            num = float(user_answer)
            if num == 4.5:
                feedback = f"–ú–æ–ª–æ–¥–µ—Ü! –û—Ç–≤–µ—Ç {num} –≤–µ—Ä–Ω—ã–π! üéâ"
                answer_input.border_color = ft.colors.GREEN
                add_solved_task("tip3_vprizm1")
                update_checkmark("tip3_vprizm1", True)
            else:
                feedback = f"–û—Ç–≤–µ—Ç {num} –Ω–µ–≤–µ—Ä–Ω—ã–π. ‚ùå"
                answer_input.border_color = ft.colors.RED
        except ValueError:
            feedback = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! ‚ö†Ô∏è"
            answer_input.border_color = ft.colors.ORANGE

        answer_input.hint_text = feedback
        answer_input.value = ""
        answer_input.width = max(180, len(feedback) * 9)
        page.update()

    answer_input.on_submit = check_answer

    enter_icon = ft.IconButton(
        icon=ft.icons.KEYBOARD_RETURN,
        icon_color="#4E426D",
        on_click=check_answer,
        tooltip="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç",
    )

    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –û–±—ä—ë–º –ø—Ä–∏–∑–º—ã",
                            size=12, weight=ft.FontWeight.BOLD),
                    ft.Row(
                        controls=[
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 1",
                                on_click=show_tip3_vprizm1,
                                style=ft.ButtonStyle(color="black"), width=100),
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 2",
                                on_click=show_tip3_vprizm2,
                                style=ft.ButtonStyle(color="black"), width=100),
                        ],
                        spacing=10
                    ),
                    ft.Row([
                        ft.Text("–ó–∞–¥–∞—á–∞ ‚Ññ1", size=24, weight=ft.FontWeight.BOLD),
                        checkmark
                    ], spacing=10),
                    ft.Text(
                        "–ù–∞–π–¥–∏—Ç–µ –æ–±—ä–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–æ–π –ø—Ä–∏–∑–º—ã, —Å—Ç–æ—Ä–æ–Ω—ã –æ—Å–Ω–æ–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–≤–Ω—ã 1, –∞ –±–æ–∫–æ–≤—ã–µ —Ä–µ–±—Ä–∞ —Ä–∞–≤–Ω—ã ‚àö3",
                        size=21,
                    ),
                    ft.Row(
                        controls=[
                            ft.Row(
                                controls=[
                                    answer_input,
                                    enter_icon,
                                ],
                                spacing=10,
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            ft.TextButton(
                                "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
                                on_click=show_tip3_vprizm1_details0_2,
                                style=ft.ButtonStyle(color="#4E426D")
                            ),
                        ],
                    ),
                ],
                spacing=10,
                alignment=ft.MainAxisAlignment.START,
            ),
            ft.Column(
                col={"sm": 9, "md": 5},
                controls=[
                    ft.Container(height=20),
                    ft.Image(
                        src="assets/sprizm1(2).svg",
                        width=180,
                        height=180,
                    ),
                    ft.ElevatedButton(
                        "–û—Ç–∫—Ä—ã—Ç—å 3d –º–æ–¥–µ–ª—å",
                         on_click=lambda e: start_pygame_with_figure(hexagonal_prism, 20),
                        style=ft.ButtonStyle(color="#4E426D")
                    ),
                ],
                spacing=15,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            ),
        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_vprizm2(page, e):
    details0.content = None
    page.update()
    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –û–±—ä—ë–º –ø—Ä–∏–∑–º—ã",
                            size=12, weight=ft.FontWeight.BOLD),

                    ft.Text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", size=24, weight=ft.FontWeight.BOLD),
                ]
            ),

        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_sprizm1_details0_2(page, e):
    global show_solution
    responsive_row = details0.content
    first_column = None
    for control in responsive_row.controls:
        if isinstance(control, ft.Column) and control.col.get("md") == 7:
            first_column = control
            break

    if show_solution:
        if len(first_column.controls) > 4:
            first_column.controls.pop()
        show_solution = False
        e.control.text = "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
    else:
        solution_content = ft.Column(
            controls=[
                ft.Text("–†–µ—à–µ–Ω–∏–µ:", size=18, weight=ft.FontWeight.BOLD),
                ft.Text("–ü–ª–æ—â–∞–¥—å –±–æ–∫–æ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–º—ã —Ä–∞–≤–Ω–∞ —Å—É–º–º–µ –ø–ª–æ—â–∞–¥–µ–π –≤—Å–µ—Ö –µ–µ –±–æ–∫–æ–≤—ã—Ö –≥—Ä–∞–Ω–µ–π:", size=18),
                ft.Row(
                    controls=[
                        ft.Text("S(–±.–ø) = 6S(–≥—Ä.) = 6√ó5√ó10 = 300.", size=17),
                    ],
                    spacing=-10,
                ),
                ft.Text("–û—Ç–≤–µ—Ç: 300", size=18, weight=ft.FontWeight.BOLD),
            ],
            spacing=5,
        )
        first_column.controls.append(solution_content)
        show_solution = True
        e.control.text = "–°–ø—Ä—è—Ç–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"

    page.update()


def show_tip3_sprizm1(page, e):
    details0.content = None
    page.update()

    global show_solution
    show_solution = False

    def update_checkmark(task_id, is_solved=None):
        if is_solved is None:
            is_solved = is_task_solved(task_id)
        pass

    checkmark = ft.Icon(
        name=ft.icons.CHECK_CIRCLE_OUTLINE,
        color=ft.colors.GREEN if is_task_solved("tip3_sprizm1") else ft.colors.GREY,
        size=24
    )
    answer_input = ft.TextField(
        hint_text="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç",
        width=180,
        border_color="#4E426D",
        cursor_color="#4E426D",
        text_size=14,
        border_radius=20,
        content_padding=10,
        expand=True,
    )

    def check_answer(e):

        user_answer = answer_input.value.strip().replace(',', '.')
        try:
            num = int(user_answer)
            if num == 300:
                feedback = f"–ú–æ–ª–æ–¥–µ—Ü! –û—Ç–≤–µ—Ç {num} –≤–µ—Ä–Ω—ã–π! üéâ"
                answer_input.border_color = ft.colors.GREEN
                add_solved_task("tip3_sprizm1")
                update_checkmark("tip3_sprizm1", True)
            else:
                feedback = f"–û—Ç–≤–µ—Ç {num} –Ω–µ–≤–µ—Ä–Ω—ã–π. ‚ùå"
                answer_input.border_color = ft.colors.RED
        except ValueError:
            feedback = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! ‚ö†Ô∏è"
            answer_input.border_color = ft.colors.ORANGE

        answer_input.hint_text = feedback
        answer_input.value = ""
        answer_input.width = max(180, len(feedback) * 9)
        page.update()

    answer_input.on_submit = check_answer

    enter_icon = ft.IconButton(
        icon=ft.icons.KEYBOARD_RETURN,
        icon_color="#4E426D",
        on_click=check_answer,
        tooltip="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç",
    )
    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –ü–ª–æ—â–∞–¥—å –±–æ–∫–æ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–º—ã",
                            size=12, weight=ft.FontWeight.BOLD),
                    ft.Row(
                        controls=[
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 1",
                                on_click=show_tip3_sprizm1,
                                style=ft.ButtonStyle(color="black"), width=100),
                            ft.OutlinedButton(
                                "–ó–∞–¥–∞—á–∞ 2",
                                on_click=show_tip3_sprizm2,
                                style=ft.ButtonStyle(color="black"), width=100),
                        ],
                        spacing=10
                    ),
                    ft.Row([
                        ft.Text("–ó–∞–¥–∞—á–∞ ‚Ññ1", size=24, weight=ft.FontWeight.BOLD),
                        checkmark
                    ], spacing=10),
                    ft.Text(
                        "–ù–∞–π–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –±–æ–∫–æ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–æ–π –ø—Ä–∏–∑–º—ã, —Å—Ç–æ—Ä–æ–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–≤–Ω–∞ 5, –∞ –≤—ã—Å–æ—Ç–∞ ‚Äî 10.",
                        size=21,
                    ),
                    ft.Row(
                        controls=[
                            ft.Row(
                                controls=[
                                    answer_input,
                                    enter_icon,
                                ],
                                spacing=10,
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            ft.TextButton(
                                "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
                                on_click=show_tip3_sprizm1_details0_2,
                                style=ft.ButtonStyle(color="#4E426D")
                            ),
                        ],
                    ),
                ],
                spacing=10,
                alignment=ft.MainAxisAlignment.START,
            ),
            ft.Column(
                col={"sm": 9, "md": 5},
                controls=[
                    ft.Container(height=20),
                    ft.Image(
                        src="assets/sprizm1(2).svg",
                        width=180,
                        height=180,
                    ),
                    ft.ElevatedButton(
                        "–û—Ç–∫—Ä—ã—Ç—å 3d –º–æ–¥–µ–ª—å",
                        on_click=lambda e: start_pygame_with_figure(hexagonal_prism, 20),
                        style=ft.ButtonStyle(color="#4E426D")
                    ),
                ],
                spacing=15,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            ),
        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_sprizm2(page, e):
    details0.content = None
    page.update()
    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –ü–ª–æ—â–∏–¥—å –ø—Ä–∏–∑–º—ã",
                            size=12, weight=ft.FontWeight.BOLD),

                    ft.Text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", size=24, weight=ft.FontWeight.BOLD),
                ]
            ),

        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_cyli(page, e):
    details0.content = None
    page.update()
    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –¶–∏–ª–∏–Ω–¥—Ä (–ø–ª–æ—â–∞–¥—å)",
                            size=12, weight=ft.FontWeight.BOLD),

                    ft.Text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —ç—Ç–∏ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", size=24, weight=ft.FontWeight.BOLD),
                ]
            ),

        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


def show_tip3_sphere(page, e):
    details0.content = None
    page.update()

    details0.content = ft.ResponsiveRow(
        controls=[
            ft.Column(
                col={"sm": 12, "md": 7},
                controls=[
                    ft.Text("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –¢–∏–ø 3. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –°—Ñ–µ—Ä–∞ –∏ —à–∞—Ä",
                            size=12, weight=ft.FontWeight.BOLD),

                    ft.Text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —ç—Ç–∏ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", size=24, weight=ft.FontWeight.BOLD),
                ]
            ),

        ],
        spacing=20,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )
    page.update()


